// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//A register
	Mux16(a=instruction,b=aluOut,sel=instruction[15],out=aRegIn);		//instruction[15]=op bit
	Not(in=instruction[5],out=aNotDest);					//instruction[5]=d1 bit
	Nand(a=instruction[15],b=aNotDest,out=aLoad);
	ARegister(in=aRegIn,load=aLoad,out=aRegOut,out[0..14]=addressM);

	//D register
	And(a=instruction[15],b=instruction[4],out=dLoad);			//instruction[4]=d2 bit
	DRegister(in=aluOut,load=dLoad,out=dRegOut); 			

	//ALU
	Mux16(a=aRegOut,b=inM,sel=instruction[12],out=yIn);			//instruction[12]=a bit
	ALU(x=dRegOut,y=yIn,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=aluOut,zr=zero,ng=strictlyNegative);

	//PC
	Or(a=zero,b=strictlyNegative,out=negative);
	Not(in=negative,out=strictlyPositive);
	And(a=instruction[0],b=strictlyPositive,out=loadPc1);			//instruction[0]=j3;
	And(a=instruction[1],b=zero,out=loadPc2);				//instruction[1]=j2;
	And(a=instruction[2],b=strictlyNegative,out=loadPc3);			//instruction[2]=j1;
	Or(a=loadPc1,b=loadPc2,out=loadPc4);
	Or(a=loadPc3,b=loadPc4,out=loadPc5);
	And(a=loadPc5,b=instruction[15],out=loadPc);
	PC(in=aRegOut,load=loadPc,inc=true,reset=reset,out[0..14]=pc);

	//writeM
	And(a=instruction[15],b=instruction[3],out=writeM);			//instruction[3]=d3 bit	
	

	
}